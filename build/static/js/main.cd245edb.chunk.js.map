{"version":3,"sources":["square.jsx","board.jsx","index.js"],"names":["Square","value","hightLight","onClick","className","Board","squares","poses","winner","size","renderSquare","i","length","includes","renderRow","rowIndex","items","row","cell","push","col","console","log","board","renderBoard","Game","useState","Array","fill","history","setHistory","current","setCurrent","stepNumber","setStepNumber","xIsNext","setxIsNext","tableSize","settableSize","isRevertMoveList","setIsRevertMoveList","sethighLightArray","status","setStatus","setWinner","newGame","useEffect","a","calculateWinner","moves","map","step","move","x","Math","floor","toString","y","desc","jumpTo","reverse","historySlice","slice","concat","handleClick","currentPlayer","score","highLight","pos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd245edb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = ({value, hightLight, onClick}) => { \n    return (\n        <button\n          className={hightLight === true ? \"square-hightLight\" : \"square\"}\n          onClick={onClick}\n        >\n          {value}\n        </button>\n      );\n  };\n\nexport default Square;","import React from \"react\";\nimport Square from \"./square\";\n\nconst Board = ({squares, poses, winner, size, onClick}) => {\n    const renderSquare = (i) => {\n      return (\n        <Square\n          value={squares[i]}\n          hightLight={\n            i === poses[poses.length - 1] ||\n            winner.includes(i)\n          }\n          onClick={() => onClick(i)}\n        />\n      );\n    }\n    const renderRow = (rowIndex, items) => {    \n      var row = [];\n      for (var i = 0; i < items; i++) {\n        let cell = renderSquare(rowIndex * items + i);\n        row.push(cell);\n      }\n      return <div className=\"board-row\">{row}</div>;\n    }\n  \n    const renderBoard = (row, col) => {        \n        console.log(row)\n        console.log(col)\n      var board = [];\n      for (var i = 0; i < row; i++) {\n        let row = renderRow(i, col);\n        board.push(row);\n      }\n      return board;\n    }\n  \n    \n    return (\n        <>        \n        <div>{renderBoard(size, size)}</div>\n        </>\n    \n    );\n    \n  }\n  \n  export default Board;","import React, { useState, useEffect } from 'react'\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport Board from './board';\n\nconst Game = () => {\n\n  const [history, setHistory] = useState([\n    {\n      squares: Array(9).fill(null),\n      poses: [],\n    },\n  ])\n  const [current, setCurrent] = useState({\n    squares: Array(9).fill(null),\n    poses: [],\n  })\n\n  const [stepNumber, setStepNumber] = useState(0)\n  const [xIsNext, setxIsNext] = useState(true)\n  const [tableSize, settableSize] = useState(5)\n  const [isRevertMoveList, setIsRevertMoveList] = useState(false)\n  const [highLightArray, sethighLightArray] = useState([])\n  const [status, setStatus] = useState(\"\")\n  const [winner, setWinner] = useState([])\n\n  const handleClick = (i) => {\n    const historySlice = history.slice(0, stepNumber + 1);\n    setCurrent(history[history.length - 1]);\n    const squares = current.squares.slice();\n    const poses = current.poses.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? \"X\" : \"O\";\n\n    poses.push(i);\n    \n    setHistory(historySlice.concat([\n      {\n        squares: squares,\n        poses: poses,\n      }\n    ]))\n      \n    setStepNumber(historySlice.length)\n    setxIsNext(!xIsNext)\n  }\n\n  const increaseTablesize = () => {\n    newGame();\n    settableSize(tableSize+1);    \n  }\n  const decreaseTablesize = () => {  \n    if (tableSize > 5) {\n      newGame();\n      settableSize(tableSize-1);\n    }\n  }\n\n  const newGame = () => {  \n    setHistory([\n      {\n        squares: Array(9).fill(null),\n        poses: [],\n      },\n    ])\n    setCurrent({\n      squares: Array(9).fill(null),\n      poses: [],\n    })\n    setStepNumber(0)\n    setxIsNext(true)\n    sethighLightArray([])    \n    setWinner(null)\n  }\n  \n  const revertMoveList = () => {    \n    setIsRevertMoveList(!isRevertMoveList)\n  }\n\n  const jumpTo = (step) => {    \n    setStepNumber(step)  \n    setxIsNext(step % 2 === 0)    \n  }\n\n  useEffect(() => {\n    \n      setCurrent(history[stepNumber]);\n      var a = calculateWinner(\n        current.squares,\n        tableSize,\n        current.poses[current.poses.length - 1]\n      );\n  \n      console.log(a);\n      setWinner(a);\n      \n      if (winner) {\n        setStatus(\"Winner: \" + (xIsNext ? \"O\" : \"X\"));\n      } else {\n        if (current.poses.length === tableSize * tableSize) {\n          setStatus(\"No one win, DRAW!\");\n        } else {\n          setStatus(\"Next player: \" + (xIsNext ? \"X\" : \"O\"));\n        }\n      }\n    \n    \n  });\n\n  const moves = () => history?.map((step, move) => {\n    const i = step.poses[move - 1];\n    const x = Math.floor(i / tableSize).toString();\n    const y = (i - tableSize * Math.floor(i / tableSize)).toString();\n    const desc = move\n      ? \"Go to move #\" + move + \" - (\" + x + \" - \" + y + \")\"\n      : \"Go to game start\";\n    return (\n      <li key={move}>\n        <button\n          className={\n            stepNumber === move ? \"li-active\" : \"li-inactive\"\n          }\n          onClick={() => jumpTo(move)}\n        >\n          {desc}\n        </button>\n      </li>\n    );\n  })\n\n    return (\n      <div className=\"game-board\">\n        <div className=\"game-setting\">\n          <p>Change table size:</p>\n\n          {/*Change tablesize  */}\n          <div className=\"game-button\">\n            <button\n              className=\"game-button-item\"\n              onClick={() => decreaseTablesize()}\n            >\n              -1\n            </button>\n            <strong className=\"game-button-item\">{tableSize}</strong>\n            <button\n              className=\"game-button-item\"\n              onClick={() => increaseTablesize()}\n            >\n              +1\n            </button>\n          </div>\n          <div className=\"game-button\">\n            <button\n              className=\"game-button-newgame\"\n              onClick={() => newGame()}\n            >\n              New game\n            </button>\n            <button\n              className=\"game-button-newgame\"\n              onClick={() => revertMoveList()}\n            >\n              Revert Move List\n            </button>\n          </div>\n\n          {/*List of moves*/}\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{isRevertMoveList ? moves().reverse() : moves()}</ol>\n          </div>\n        </div>\n\n        {/* Game table */}\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            poses={current.squares}\n            winner={winner ? winner : []}            \n            size={tableSize}\n            onClick={(i) => handleClick(i)}\n          />\n        </div>\n      </div>\n    );\n\n}\n\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n\nfunction calculateWinner(squares, size, current) {\n  var currentPlayer = squares[current];\n\n  // ngang trái\n  var score = 0;\n  var highLight = [];\n\n  for (let i = 0; i < 5 && i <= current % size; i++) {\n    if (squares[current - i] === currentPlayer) {\n      score += 1;\n      highLight.push(current - i);\n    } else {\n      break;\n    }\n  }\n\n  // ngang phải\n  for (let i = 1; i < 5 && i - 1 < size - (current % size); i++) {\n    if (squares[current + i] === currentPlayer) {\n      score += 1;\n      highLight.push(current + i);\n    } else {\n      break;\n    }\n  }\n\n  if (score >= 5) {\n    return highLight;\n  }\n\n  score = 0;\n  \n  // dọc trên\n  for (let i = 0; current - i * size > 0; i++) {\n    if (squares[current - i * size] === currentPlayer) {\n      score += 1;\n      highLight.push(current - i * size);\n    } else {\n      break;\n    }\n  }\n\n  // dọc dưới\n  for (let i = 1; current + i * size < size * size; i++) {\n    if (squares[current + i * size] === currentPlayer) {\n      score += 1;\n      highLight.push(current + i * size);\n    } else {\n      break;\n    }\n  }\n\n  if (score >= 5) {\n    return highLight;\n  }\n\n  score = 0;\n  highLight = [];\n  // chéo trái trên\n  for (let i = 0; current - i * (size + 1) > 0; i++) {\n    const pos = current - i * (size + 1);\n    if (squares[pos] === currentPlayer) {\n      score += 1;\n      highLight.push(pos);\n      if (pos % size === size - 1 || pos % size === 0) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  // chéo phải dưới\n  for (let i = 1; current + i * (size + 1) < size * size; i++) {\n    const pos = current + i * (size + 1);\n    if (squares[pos] === currentPlayer) {\n      score += 1;\n      highLight.push(pos);\n      if (pos % size === size - 1 || pos % size === 0) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  if (score >= 5) {\n    return highLight;\n  }\n\n  score = 0;\n  highLight = [];\n  // chéo phải trên\n  for (let i = 0; current - i * (size - 1) > 0; i++) {\n    const pos = current - i * (size - 1);\n    if (squares[pos] === currentPlayer) {\n      score += 1;\n      highLight.push(pos);\n      if (pos % size === size - 1 || pos % size === 0) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  // chéo trái dưới\n  for (let i = 1; current + i * (size - 1) < size * size; i++) {\n    const pos = current + i * (size - 1);\n    if (squares[pos] === currentPlayer) {\n      score += 1;\n      highLight.push(pos);\n      if (pos % size === size - 1 || pos % size === 0) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  if (score >= 5) {\n    return highLight;\n  }\n\n  return null;\n};\n"],"sourceRoot":""}